#if 0
//以下情况不同系统，不同编译器，结果不一样
//在老师32位机子上，有以下情况
基类A
派生类B1，继承虚基类A
派生类B2，继承虚基类A
派生类C，继承派生类B1，继承派生类B2

1.当所有类都没有成员时
基类A，派生类B1，派生类B2，都占1个字节
派生类C，占2个字节

2.当基类A有一个虚函数时
基类A，有一个A虚函数表指针，占4个字节
派生类B1继承基类A，有一个B1虚函数表指针，占4个字节
派生类B2继承基类A，有一个B2虚函数表指针，占4个字节
派生类C，有一个B1虚函数表指针+一个B2虚函数表指针，共占8个字节

3.当基类A有一个虚函数和一个整型成员变量时
基类A，有一个A虚函数表指针+一个整型变量，共占8个字节
派生类B1里，有一个B1虚函数表指针+B1虚基类指针+一个A整型变量，共占12个字节
派生类B2里，有一个B2虚函数表指针+B2虚基类指针+一个A整型变量，共占12个字节
派生类C里，有一个B1虚函数表指针+B2虚函数表指针 +C虚基类指针+一个A整型变量，共占16个字节
#endif
#if 0
//以下情况不同系统，不同编译器，结果不一样
//在自己64位机子上，有以下情况
基类A
派生类B1，继承虚基类A
派生类B2，继承虚基类A
派生类C，继承派生类B1，继承派生类B2

1.当所有类都没有成员时
基类A，占1个字节
派生类B1，派生类B2，都占8个字节
派生类C，有一个B1虚基类指针+B2虚函数基类指针，占16个字节

2.当基类A有一个虚函数时
基类A，有一个A虚函数表指针，占8个字节
派生类B1继承基类A，有一个B1虚函数表指针，占8个字节
派生类B2继承基类A，有一个B2虚函数表指针，占8个字节
派生类C，有一个B1虚函数表指针+一个B2虚函数表指针，共占16个字节

3.当基类A有一个虚函数和一个整型成员变量时
基类A，有一个A虚函数表指针+一个整型变量，共占16个字节,小字节向大字节看齐，下面同理
派生类B1里，有一个B1虚函数表指针+B1虚基类指针+一个A整型变量，共占24个字节
派生类B2里，有一个B2虚函数表指针+B2虚基类指针+一个A整型变量，共占24个字节
派生类C里，有一个B1虚函数表指针+B2虚函数表指针 +C虚基类指针+一个A整型变量，共占32个字节

//在基类中，若有虚函数表指针或是其它指针，后面新增成员至少申请8字节
//在基类中，若没有指针，则新增成员申请的的空间以成员数据类型为准
//在派生类中
//虚函数表指针和虚基类指针至少占8字节，故申请的空间大小至少8字节
#endif
#include<iostream>
//7.cpp
//虚基类，多态，补充内容
using namespace std;
class A{
    //小字节向大字节看齐
    protected:
//    char c1;	    //1
//    char c2[2];	    //2
//    char c3[5];	    //3
//    char *c4;	    //4
//    int i1;	    //5
//    int *i2;	    //6
    short int i3;   //7
//    short int *i4;  //8
//    long int i5;    //9
//    long int *i6;   //10
//    float f1;	    //11
//    float *f2;	    //12
//    double d1;	    //13
//    double *d2;	    //14
//    string s1;	    //15
//    string s2[2];   //16
//    string *s3;	    //17
    public:
//    virtual void show(){}
};
class B1 : virtual public A{
};
class B2 : virtual public A{
};
class C : public B1,public B2{
};
int main(){
    cout<<"A_size = "<<sizeof(A)<<endl;
    cout<<"B1_size = "<<sizeof(B1)<<endl;
    cout<<"B2_size = "<<sizeof(B2)<<endl;
    cout<<"C_size = "<<sizeof(C)<<endl;
    return 0;
}
