API数据类型
MYSQL：这个结构表示对一个数据库连接的句柄，它被用于几乎所有的MySQL函数
-------------------------------------------------------------------------
MYSQL_RES：这个结构代表返回行的一个查询(select,show,describe,explain)结果
-------------------------------------------------------------------------
MYSQL_ROW：这是一个数据的类型安全(type-safe)的表示
-------------------------------------------------------------------------
当前它的实现为一个计数器的字符数组
(如果字段值可能包含二进制数据，你不能将这些视为空终止串，
 因为这杨的值可以在内部包含空字节)
可通过调用mysql_fetch_row获得
-------------------------------------------------------------------------
MYSQL_FIELD：这个结构包含字段信息，例如字段名，类型和大小
可通过调用mysql_fetch_field对每一列获得MYSQL_FIELD结构
    MYSQL_FIELD{
	char *name;
	//字段名，是一个以空结尾的字符串
	char *table;
	//包含该字段的表的名字，如果它不是可计算的字段，
	//对可计算的字段，table值是一个空字符串
	char *def;
	//这字段的缺省值，是一个以空结尾的字符串
	//只要你使用，只有你使用mysql_list_fields才可以设置它
	enum enum_field_types type;
	//是一个枚举型
    };
    enum enum_field_types{
	FIELD_TYPE_TINY,	//tinyint 字段
	FIELD_TYPE_SHORT,	//smallint 字段
	FIELD_TYPE_LONG,	//integer 字段
	FIELD_TYPE_INT24,	//mediumint 字段
	FIELD_TYPE_LONGLONG,	//bigint 字段
	FIELD_TYPE_DECIMAL,	//decimal 或 numeric 字段
	FIELD_TYPE_FLOAT,	//float 字段
	FIELD_TYPE_DOUBLE,	//double 或 real 字段
	FIELD_TYPE_TIMESTAMP,	//timestamp 字段
	FIELD_TYPE_DATE,	//date 字段
	FIELD_TYPE_DATETIME,	//datetime 字段
	FIELD_TYPE_YEAR,	//year 字段
	FIELD_TYPE_STRING,	//字符串(char或varchar)字段
	FIELD_TYPE_BLOB,	//blob 或 text 字段，使用max_length决定最大长度
	FIELD_TYPE_SET,		//set 字段
	FIELD_TYPE_ENUM,	//enum 字段
	FIELD_TYPE_NULL,	//null 类型字段
	FIELD_TYPE_CHAR,	//不推荐，使用FIELD_TYPE_TINY代替
    };
-------------------------------------------------------------------------
MYSQL_FIELD_OFFSET：这个是一个相对一个MYSQL字段表的偏移量的类型安全表示
由mysql_field_seek使用，偏移量是在一行以内的字段编号，从0开始
-------------------------------------------------------------------------
my_ulonglong：该类型属于行编号和mysql_affected_rows,mysql_num_rows,mysql_insert_id
这种类型提供0到1.84e19的一个范围。
在一些系统上，试图打印类型my_ulonglong的值将不工作。
可将它转换成unsigned long并且使用%lu格式打印
printf("number of rows:%lu\n",(unsigned long)mysql_num_rows(result));

常用mysql的API函数
1.MYSQL *STDCALL mysql_init(MYSQL *mysql);
-------------------------------------------------------------------------
分配/初始化与mysql_real_connect相适应的MYSQL对象
如果mysql是NULL指针，该函数将分配，初始化，并返回新对象
否则，将初始化对象，并返回对象的地址
如果mysql_init分配了新的对象，当调用mysql_close来关闭连接时，将释放该对象
-------------------------------------------------------------------------
返回值：初始化的MYSQL *句柄，若内存不足以分配的对象，返回NULL
*************************************************************************
2.MYSQL *STDCALL mysql_real_connect(
    MYSQL *mysql, const char *host,const char *user,
    const char *passwd,const char *db,unsigned int port,
    const char *unix_socket,unsigned long clientflag);
-------------------------------------------------------------------------
连接到MySQL服务器
mysql：mysql_init返回的指针
host：
为NULL或localhost时，链接的是本地的计算机，
当mysql默认在unix系统中，root账户是没有密码的，因此用户使用root，密码为NULL
当db为空时，函数链接到默认的数据库，在进行mysql安装时，会存在默认的test数据库，
因此次数可以使用test数据库名称，prot端口为0，使用unix链接方式，unix_socket为NULL时
表明不使用unix_socket或管道机制，最后一个参数经常设置为0
user：
passwd：
db：
port：
unix_socket：
clientflag：
返回值：当链接成功时，返回MYSQL连接句柄(此时与该函数第一个参数地址相同)，失败返回NULL
*************************************************************************
3.const char * STDCALL mysql_error(MYSQL *mysql);
mysql：mysql_init返回的指针
返回值：返回上一次调用的MySQL函数的错误代码
*************************************************************************
4.void STDCALL mysql_close(MYSQL *sock);
sock：
*************************************************************************
5.int STDCALL mysql_query(MYSQL *mysql, const char *q);
执行指定为"以NULL终结的字符串"的SQL查询
mysql：
q：
返回值：
*************************************************************************
6.MYSQL_RES *STDCALL mysql_store_result(MYSQL *mysql);
检索完整的结果到客户端
mysql：
返回值：
*************************************************************************
7.my_ulonglong STDCALL mysql_num_rows(MYSQL_RES *res);
res：
返回值：返回结果集的行数
*************************************************************************
8.MYSQL_ROW STDCALL mysql_fetch_row(MYSQL_RES *result);
从结果集中获取下一行
result：
返回值：






