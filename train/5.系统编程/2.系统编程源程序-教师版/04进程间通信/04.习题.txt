利用fifo实现一个本地聊天室

要求有服务器和客户端两方。服务器启动监听客户端请求,
并负责记录处理客户端登录、聊天。退出等相关数据。
客户端完成登录、发起聊天等操作。可以借助服务器转发向
某个客户端完成数据包发送(聊天)

客户端向服务器发送数据包,可采用如下协议格式来存储客户端
数据,使用"协议号"区分客户端请求的各种状况


协议号  src    dest   data
[4字节][4字节][4字节][...]

登录    登录者
[ 1 ]  [      ] [ .... ]

聊天包   src    dest    data
[ 2 ]  [     ] [    ]  [    ] 

离线
[ 3 ]  [  ]  [  ] [  ]

[ 4 ]  [  退出登录 ] 

---------------------------------------
fifo.h

//0 新用户注册
//1 聊天信息
//2 服务器更新列表信息

struct usr{
	int num;
	char name[20];
	pid_t pid;	
};

struct cmsg{
	int num;
	struct usr src;
	struct usr dest;
	char msg[256];	
};

struct smsg{
	int num;
	struct usr info;
}

---------------------------------------

/*用我们讲过的fcntl对文件设置阻塞和非阻塞*/

客户端

#include "fifo.h"


int main(int argc, char* argv[])
{
	//1.获取自己的pid和name,填充struct smsg;
	//2.非阻塞属性创建私有FIFO
	//3.打开服务器公共的FIFO,把自己的信息向服务器注册
	//4.非阻塞读私有FIFO
	    read返回-1,继续轮询
	    read返回>0,协议包解析
	    //num为1，聊天信息解析,打印到输出端聊天信息
	    //num为2,服务器更新在线列表信息,打印到输出端
	//5.设置标准输入为非阻塞属性,读标准输入
		//read返回-1,继续轮询
		//read返回>1,字符串解析,填充struct cmsg
		//向服务器公共FIFO,写msg
	//6.轮询	    
}

---------------------------------------------
服务器

#include "fifo.h"

int main()
{
	//1.打开公共fifo，阻塞等待读
	//2.读到的内容字符串解析
	//3.判断协议号num
		//1.用户注册
		  //非阻塞写打开新用户创建的FIFO
		  //增加在线列表节点	
	    //2.用户聊天
	      //取出dst
	      //中转数据给用户
	    //3.用户退出
	      //将用户从在线列表中摘除
	//返回第一步1，继续阻塞在公共FIFO读等待      

}










